LOADL 1
STORE (1) 0[SB]

JUMP while_start_1

LOADA 0[SB]
STOREI (1)
STORE (8) 1[SB]
;fr.n7.stl.minic.ast.expression.accessible.VariableAccess@574caa3f
;(i == 0)
LOAD (1) 0[SB]
LOADL 0
SUBR IEq
JUMPIF (0) else_1
LOADL 1
LOADA 0[SB]
STOREI (1)
LOADL 5
LOADL 1
SUBR IMul
SUBR MAlloc
STORE (1) 10[SB]
;fr.n7.stl.minic.ast.expression.accessible.VariableAccess@3c679bde
LOAD (1) 10[SB]
LOADL 3
LOADL 1
SUBR IMul
SUBR IAdd
STORE (1) 11[SB]
LOADL 4
LOADA 10[SB]
STOREI (1)
<<<<<<< HEAD
while_start_1
;fr.n7.stl.minic.ast.expression.accessible.VariableAccess@68f7aae2
=======
JUMP endif_2
else_1
;fr.n7.stl.minic.ast.expression.accessible.VariableAccess@6c629d6e
;(- i)
LOAD (1) 0[SB]
SUBR INeg
LOADA 0[SB]
STOREI (1)
STOREI (1)
endif_2
JUMP while_start_3
LOADL 1
LOADA 0[SB]
STOREI (1)
STOREI (1)
while_start_3
;fr.n7.stl.minic.ast.expression.accessible.VariableAccess@5ecddf8f
>>>>>>> 3d0f29a (int* ptr= cela fonctionne dans cette version)
;(i == 2)
LOAD (1) 0[SB]
LOADL 2
SUBR IEq
JUMPIF (1) while_body_while_start_1
while_end_2
HALT

